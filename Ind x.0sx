import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

const App = () => {
  // States
  const [notes, setNotes] = useState([]);
  const [photos, setPhotos] = useState([]);
  const [timeline, setTimeline] = useState([]);
  const [theme, setTheme] = useState('romantic');
  const [isMessageVisible, setIsMessageVisible] = useState(false);
  const [music, setMusic] = useState(''); // Music state

  // Load data from localStorage
  useEffect(() => {
    try {
      const storedNotes = localStorage.getItem("notes");
      const storedPhotos = localStorage.getItem("photos");
      const storedTimeline = localStorage.getItem("timeline");
      const storedTheme = localStorage.getItem("theme");
      const storedMusic = localStorage.getItem("music");

      if (storedNotes) setNotes(JSON.parse(storedNotes));
      if (storedPhotos) setPhotos(JSON.parse(storedPhotos));
      if (storedTimeline) setTimeline(JSON.parse(storedTimeline));
      if (storedTheme) setTheme(storedTheme);
      if (storedMusic) setMusic(storedMusic);
    } catch (e) {
      console.error("Failed to load data from localStorage", e);
    }
  }, []);

  // Save to localStorage
  useEffect(() => { localStorage.setItem("notes", JSON.stringify(notes)); }, [notes]);
  useEffect(() => { localStorage.setItem("photos", JSON.stringify(photos)); }, [photos]);
  useEffect(() => { localStorage.setItem("timeline", JSON.stringify(timeline)); }, [timeline]);
  useEffect(() => { localStorage.setItem("theme", theme); }, [theme]);
  useEffect(() => { localStorage.setItem("music", music); }, [music]);

  // Handlers
  const addNote = (e) => {
    e.preventDefault();
    const note = e.target.note.value.trim();
    if (note) { setNotes(prev => [note, ...prev]); e.target.note.value = ''; }
  };

  const addPhoto = (e) => {
    e.preventDefault();
    const files = e.target.photo.files;
    const caption = e.target.caption.value;
    if (files.length > 0) {
      [...files].forEach(file => {
        const reader = new FileReader();
        reader.onload = (ev) => setPhotos(prev => [{ src: ev.target.result, caption }, ...prev]);
        reader.readAsDataURL(file);
      });
      e.target.photo.value = ''; e.target.caption.value = '';
    }
  };

  const addTimeline = (e) => {
    e.preventDefault();
    const date = e.target.date.value;
    const title = e.target.title.value;
    const desc = e.target.desc.value;
    if (date && title) {
      setTimeline(prev => [{ date, title, desc }, ...prev]);
      e.target.date.value = ''; e.target.title.value = ''; e.target.desc.value = '';
    }
  };

  const deleteItem = (setter, index) => setter(prev => prev.filter((_, i) => i !== index));

  const toggleHeartAnimation = () => setIsMessageVisible(prev => !prev);

  const exportData = () => {
    const data = { notes, photos, timeline, theme, music }; // include music
    const blob = new Blob([JSON.stringify(data)], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "love-scrapbook.json";
    a.click();
    URL.revokeObjectURL(url);
  };

  const importData = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (ev) => {
      try {
        const data = JSON.parse(ev.target.result);
        if (data.notes) setNotes(data.notes);
        if (data.photos) setPhotos(data.photos);
        if (data.timeline) setTimeline(data.timeline);
        if (data.theme) setTheme(data.theme);
        if (data.music) { setMusic(data.music); document.getElementById('musicPlayer').src = data.music; }
      } catch (err) { console.error("Failed to import data", err); }
    };
    reader.readAsText(file);
  };

  // Themes
  const themes = {
    romantic: 'bg-gradient-to-br from-[#ffdde1] to-[#ee9ca7] text-gray-800',
    light: 'bg-gray-50 text-gray-800',
    dark: 'bg-gray-900 text-gray-200',
  };
  const sectionThemes = {
    romantic: 'bg-white bg-opacity-80 text-gray-800',
    light: 'bg-white text-gray-800',
    dark: 'bg-gray-800 text-gray-200',
  };
  const cardThemes = {
    romantic: 'bg-white text-gray-800',
    light: 'bg-white text-gray-800',
    dark: 'bg-gray-700 text-gray-200',
  };
  const headerThemes = {
    romantic: 'bg-white bg-opacity-80 text-[#e91e63]',
    light: 'bg-white text-gray-800',
    dark: 'bg-gray-800 text-[#ff79c6]',
  };
  const buttonThemes = {
    romantic: 'bg-[#e91e63] hover:bg-[#d81b60] text-white',
    light: 'bg-blue-500 hover:bg-blue-600 text-white',
    dark: 'bg-[#ff79c6] hover:bg-[#d81b60] text-white',
  };

  const ScrapbookSection = ({ children, title }) => (
    <section className={`max-w-4xl mx-auto my-8 p-6 rounded-2xl shadow-xl transition-colors duration-400 ${sectionThemes[theme]}`}>
      <h2 className={`text-3xl font-bold mb-4 ${headerThemes[theme]}`}>{title}</h2>
      {children}
    </section>
  );

  return (
    <div className={`min-h-screen font-sans ${themes[theme]} transition-colors duration-400`}>
      <header className={`sticky top-0 z-10 p-4 text-center backdrop-blur-sm ${headerThemes[theme]}`}>
        <h1 className="text-4xl font-bold mb-2" contentEditable>üíñ Our Love Scrapbook üíñ</h1>
        <label className="text-sm font-medium">
          Theme:
          <select
            className={`ml-2 p-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-opacity-50 ${theme === 'dark' ? 'bg-gray-700 text-gray-200 border-gray-600 focus:ring-purple-500' : 'bg-white text-gray-800 border-gray-300 focus:ring-pink-500'}`}
            value={theme}
            onChange={e => setTheme(e.target.value)}
          >
            <option value="romantic">Romantic</option>
            <option value="light">Light</option>
            <option value="dark">Dark</option>
          </select>
        </label>
      </header>

      {/* Heart Animation */}
      <ScrapbookSection title="Click My Heart!">
        <div className="flex flex-col items-center">
          <motion.button
            whileTap={{ scale: 0.9 }}
            animate={{ scale: [1, 1.1, 1] }}
            transition={{ duration: 1, repeat: Infinity }}
            className="text-8xl p-4 transition-transform duration-200 focus:outline-none"
            onClick={toggleHeartAnimation}
          >
            ‚ù§Ô∏è
          </motion.button>
          <AnimatePresence>
            {isMessageVisible && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                className={`mt-4 p-6 rounded-2xl shadow-lg transition-opacity duration-500 text-center ${sectionThemes[theme]}`}
              >
                <p className="text-2xl font-semibold text-pink-600">I love you! You make my heart flutter every day. ‚ù§Ô∏è</p>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </ScrapbookSection>

      {/* Love Notes */}
      <ScrapbookSection title="üíå Love Notes">
        <form onSubmit={addNote} className="flex gap-2 mb-4 flex-wrap">
          <input name="note" type="text" placeholder="Write a note..." className="flex-grow p-3 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-pink-300 transition-colors duration-200" />
          <button type="submit" className={`px-6 py-3 rounded-xl font-bold transition-all duration-300 transform hover:scale-105 ${buttonThemes[theme]}`}>Add</button>
        </form>
        <AnimatePresence initial={false}>
          <div className="flex flex-col-reverse gap-3">
            {notes.map((note, index) => (
              <motion.div key={note+index} initial={{ opacity: 0, y:50 }} animate={{ opacity:1, y:0 }} exit={{ opacity:0, y:-50, scale:0.8 }} transition={{ duration:0.3 }} className={`p-4 rounded-xl shadow-md flex items-center justify-between ${cardThemes[theme]}`}>
                <p className="flex-grow">{note}</p>
                <button onClick={() => deleteItem(setNotes, index)} className={`ml-4 px-3 py-1 rounded-full text-xs font-bold transition-colors duration-200 ${buttonThemes[theme]}`}>Delete</button>
              </motion.div>
            ))}
          </div>
        </AnimatePresence>
      </ScrapbookSection>

      {/* Photos */}
      <ScrapbookSection title="üì∏ Memories Gallery">
        <form onSubmit={addPhoto} className="flex flex-col sm:flex-row gap-2 mb-4 flex-wrap
